"""
Defines class for the application. This handles starting logging using
cx_Logging and saving/restoring settings in a standard way. It also sets up a
set of attributes that are copied to all controls, in particular the
application configuration and settings objects.
"""

import ceGUI
import cx_Exceptions
import cx_Logging
import datetime
import os
import wx
import sys

__all__ = ["Application", "Config"]

# grab the build release string from the build constants module generated by
# cx_Freeze, if possible
try:
    from BUILD_CONSTANTS import BUILD_RELEASE_STRING
except ImportError:
    BUILD_RELEASE_STRING = "Source"


class Application(wx.App):
    copyAttributes = ""
    copyrightOwner = None
    copyrightStartYear = None
    copyrightEndYear = None
    description = None
    vendorName = None
    configClassName = "Config"
    topLevelClassName = "w_TopLevelFrame.Frame"
    version = BUILD_RELEASE_STRING
    logMaxFilesDefault = 1
    showTopWindowOnInit = True
    busyInfo = None

    def _ExceptionHandler(self, excType, excValue, excTraceback):
        exc = cx_Exceptions.GetExceptionInfo(excType, excValue, excTraceback)
        self.OnException(exc)

    def GetConfig(self, dataSource = None):
        cls = ceGUI.GetModuleItem(self.configClassName, associatedObj = self)
        return cls(self, dataSource)

    def GetDefaultLoggingFileName(self):
        baseName = "%s.log" % self.GetAppName()
        standardPaths = wx.StandardPaths.Get()
        return os.path.join(standardPaths.GetUserDataDir(), baseName)

    def GetTopWindow(self):
        return ceGUI.OpenWindow(self.topLevelClassName)

    def OnException(self, exc, parent = None, logException = True):
        if logException:
            cx_Logging.LogException(exc)
        if self.busyInfo is not None:
            self.busyInfo.Destroy()
            self.busyInfo = None
        wx.MessageBox(exc.message, "Error", wx.OK | wx.ICON_EXCLAMATION,
                parent)
        method = getattr(exc, "method", None)
        if method is not None:
            method()

    def OnStartup(self):
        return True

    def Run(self):
        self.topWindow = None
        self.SetAppName(self.__class__.__name__)
        if self.vendorName is not None:
            self.SetVendorName(self.vendorName)
        if sys.platform == "win32":
            self.settings = wx.ConfigBase.Get()
        else:
            standardPaths = wx.StandardPaths.Get()
            dir = standardPaths.GetUserDataDir()
            fileName = os.path.join(dir, "settings.cfg")
            self.settings = wx.FileConfig(localFilename = fileName)
            wx.ConfigBase.Set(self.settings)
        self.StartLogging()
        sys.excepthook = self._ExceptionHandler
        self.copyAttributes = set(self.copyAttributes.split())
        self.config = self.GetConfig()
        self.copyAttributes.add("settings")
        self.copyAttributes.add("config")
        if self.OnStartup():
            self.topWindow = self.GetTopWindow()
            if self.topWindow is not None:
                self.SetTopWindow(self.topWindow)
                if self.showTopWindowOnInit:
                    self.topWindow.Show()
        self.MainLoop()

    def StartLogging(self):
        defaultFileName = self.GetDefaultLoggingFileName()
        fileName = self.settings.Read("LogFileName", defaultFileName)
        dirName = os.path.dirname(fileName)
        if not os.path.isdir(dirName):
            os.makedirs(dirName)
        levelName = self.settings.Read("LogLevel", "ERROR")
        level = getattr(cx_Logging, levelName)
        maxFilesRaw = self.settings.Read("LogMaxFiles",
                str(self.logMaxFilesDefault))
        try:
            maxFiles = int(maxFilesRaw)
        except:
            self.settings.DeleteEntry("LogMaxFiles")
            maxFiles = self.logMaxFilesDefault
        cx_Logging.StartLogging(fileName, level, maxFiles)


class Config(object):
    dateFormat = "%Y/%m/%d"
    timestampFormat = "%Y/%m/%d %H:%M"
    dateNumberFormat = "yyyy/mm/dd"
    timestampNumberFormat = "yyyy/mm/dd hh:mm:ss"

    def __init__(self, app, dataSource = None, configId = None):
        self.settings = app.settings
        self.dataSource = dataSource
        self.configId = configId
        if dataSource is None:
            appName = app.GetAppName()
            self.dataSource = self.ConnectToDataSource(app, appName)
        self.OnCreate()

    def __ConvertDateToString(self, value):
        return value.strftime(self.dateFormat)

    def __ConvertStringToDate(self, value):
        return datetime.datetime.strptime(value, self.dateFormat)

    def __ConvertStringToTimestamp(self, value):
        return datetime.datetime.strptime(value, self.timestampFormat)

    def __ConvertTimestampToString(self, value):
        return value.strftime(self.timestampFormat)

    def Clone(self, configId = None):
        app = ceGUI.GetApp()
        newConfig = self.__class__(app, self.dataSource,
                configId or self.configId)
        newConfig.OnClone(self)
        return newConfig

    def ConnectToDataSource(self, app, appName):
        pass

    def GetBaseSettingsName(self):
        return "Database/%s/%s" % (self.dataSource.dsn, self.configId)

    def OnClone(self, otherConfig):
        pass

    def OnCreate(self):
        pass

    def OnRecreate(self):
        pass

    def ReadDatabaseSetting(self, name, defaultValue = None, isComplex = False,
                converter = None, isDate = False, isTimestamp = False):
        settingsName = "%s/%s" % (self.GetBaseSettingsName(), name)
        return self.ReadSetting(settingsName, defaultValue = defaultValue,
                isComplex = isComplex, converter = converter, isDate = isDate,
                isTimestamp = isTimestamp)

    def ReadSetting(self, name, defaultValue = None, isComplex = False,
            converter = None, isDate = False, isTimestamp = False):
        value = self.settings.Read(name, "")
        if not value:
            return defaultValue
        if isComplex:
            converter = eval
        elif isDate:
            converter = self.__ConvertStringToDate
        elif isTimestamp:
            converter = self.__ConvertStringToTimestamp
        if converter is not None:
            try:
                value = converter(value)
            except:
                self.settings.DeleteEntry(name)
                value = defaultValue
        return value

    def RestoreConfigId(self):
        settingsName = "Database/%s/ConfigId" % self.dataSource.dsn
        self.configId = self.ReadSetting(settingsName, converter = int)
        return self.configId

    def SaveConfigId(self, configId):
        settingsName = "Database/%s/ConfigId" % self.dataSource.dsn
        self.WriteSetting(settingsName, configId)

    def WriteDatabaseSetting(self, name, value, isComplex = False,
            converter = None, isDate = False, isTimestamp = False):
        settingsName = "%s/%s" % (self.GetBaseSettingsName(), name)
        self.WriteSetting(settingsName, value, isComplex = isComplex,
                converter = converter, isDate = isDate,
                isTimestamp = isTimestamp)

    def WriteSetting(self, name, value, isComplex = False, converter = None,
            isDate = False, isTimestamp = False):
        if value is None:
            value = ""
        else:
            if isComplex:
                converter = repr
            elif isDate:
                converter = self.__ConvertDateToString
            elif isTimestamp:
                converter = self.__ConvertTimestampToString
            elif converter is None:
                converter = str
            value = converter(value)
        self.settings.Write(name, value)

